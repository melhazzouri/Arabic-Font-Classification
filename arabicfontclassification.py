# -*- coding: utf-8 -*-
"""ArabicFontClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YJJzM1b4_dhdkm5iIQlCz8Hy8ane4Gma

# Import libraries
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import PIL
import os
from pathlib import Path
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

"""# Dataset"""

print('# of real Ruqaa images: ', len(os.listdir('/content/rufa/real/ruqaa/')))
print('# of real Farsi images: ', len(os.listdir('/content/rufa/real/farsi/')))
print('# synthesized Ruqaa: ', len(os.listdir('/content/rufa/synth/ruqaa/')))
print('# synthesized Farsi: ', len(os.listdir('/content/rufa/synth/farsi/')))

synth_dir = Path('/content/rufa/synth')
real_dir = Path('/content/rufa/real')

CLASS_NAMES = np.array([item.name for item in real_dir.glob('*')])
CLASS_NAMES

data_dir_train = '/content/rufa/synth'
data_dir_test = '/content/rufa/real'

# Defining variables
batch_size = 10
img_height = 100
img_width = 100

"""# Train, test split

"""

train_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir_train,
  label_mode='categorical',
  shuffle=True,
  image_size=(img_height, img_width),
  batch_size=batch_size)

test_ds = tf.keras.utils.image_dataset_from_directory(
  data_dir_test,
  label_mode='categorical',
  shuffle=False,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

"""# Visualize the data"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(class_names[labels[i].numpy().argmax()])
        plt.axis("off")

"""# Model"""

input_shape=(img_height, img_width, 3)
output_shape = num_classes= len(class_names)

def cnn(input_shape,output_shape):
  model = Sequential([
    layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
    layers.Conv2D(32, 3,  activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(16, 3,  activation='relu'),
    layers.MaxPooling2D(),
    layers.Dropout(0.5),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(units=num_classes, activation='softmax')
])
  return model

model.summary()

epochs = 8
callbacks = None

model.compile(optimizer='adam', 
              loss='CategoricalCrossentropy',
              metrics=['accuracy'])

"""# Train"""

history = model.fit(train_ds, epochs =epochs, callbacks = None);

"""# Evaluate"""

test_score = model.evaluate(test_ds)

"""# Classification Evaluation

"""

#Calculating prediction and ground truth on Test dataset
y_true = []
for t, tensor in test_ds.unbatch().enumerate():
    array = tensor[1].numpy()
    y_true.append(array.argmax(axis=0))

y_predict = model.predict(test_ds).argmax(axis=1)

# Confusion Matrix and accuracy
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_true, y_predict)
print(cm,'\n')
accuracy_score(y_true, y_predict)

# Precision and recall
from sklearn.metrics import classification_report
print(classification_report(y_true,y_predict))

accuracy = history.history['accuracy']

epoch_range = range(epochs)

plt.figure(figsize=(18, 8))
plt.subplot(1, 2, 1)
plt.plot(epoch_range, accuracy, label='Training Accuracy')
plt.title('Training Accuracy')

plt.legend(loc='lower right')

plt.show()

"""# Save the Model"""

model.save("model.h5")
print("Saved model to disk")

"""# Load the model """

from tensorflow.keras.models import load_model
model = load_model('model.h5')

"""# Predict on new data

"""

pic = 'Ruqaa'

import numpy as np
from keras.utils import load_img, img_to_array
#test_image = load_img(f'/Users/lucashawranke/Downloads/birds/data/images_to_test/{pic}.jpg', target_size = (img_height, img_width))
test_image = load_img(f'test/{pic}.jpg', target_size = (img_height, img_width))

test_image = img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
predictions = model.predict(test_image)
score = tf.nn.softmax(predictions[0])
print(
    "This image most likely belongs to {} with a {:.2f} percent confidence."
    .format(class_names[np.argmax(score)], 100 * np.max(score))
)

"""#Visualizing our CNN architecture

"""

from keras.utils.vis_utils import plot_model
plot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)
from IPython.display import Image
Image("model.png")